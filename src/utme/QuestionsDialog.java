/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * QuestionsDialog.java
 *
 * Created on Nov 22, 2012, 11:31:26 AM
 */

package utme;

import java.awt.CardLayout;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.NumberFormat;
import java.util.HashSet;
import javax.swing.ButtonGroup;
import javax.swing.JRadioButton;
import java.util.Random;
import java.util.Set;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.Timer;
//import javax.swing.JOptionPane;

/**
 *
 * @author ADmin
 */
public class QuestionsDialog extends javax.swing.JDialog {

    /** Creates new form QuestionsDialog */
    private submitDialog sDialog;
    private Timer timer;
    private String []nameOfSubjects;
    private JRadioButton [] subjectButtons;
    private ButtonGroup subjectButtonsGroup = new ButtonGroup();
    private QuestionInfo info;
    private int numberOfQuestions, numberOfSubjects;
    private String questionNames[];
    private CardLayout card;
    private int tracker = 0;
    private int total;
    private int selectedAnswers[];
    private int score = 0;
    private int scoresPerSubject[];
    private int realAnswers[];
    private int pscore;
    private Question questions[];
    private int []numberOfUnanswered;
    private boolean wasFormallySelected = false;
    private int hr = 0, min = 0, sec = 0;
    private NumberFormat format;
    private int time = 0;
    private boolean submitCondition;
    private String nameOfStudent;
    private Random rand;
    //private int questionNumbers[];

    public QuestionsDialog(java.awt.Frame parent, boolean modal, QuestionInfo info) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        getContentPane().setBackground(new Color(0,0,0));
        previous.setEnabled(false);
        submit.setEnabled(false);
        setTimeparameters(info);
        //timer = new Timer();
        this.info = info;
        nameOfStudent = info.getNameOfStudent();
        sDialog = new submitDialog(new JFrame(), true);
        nameOfSubjects = info.getNameOfSubjects();
        numberOfSubjects = nameOfSubjects.length;
        numberOfQuestions = info.getNoOfQuestionsPerSubject();
        subjectButtons = new JRadioButton[numberOfSubjects];
        total = numberOfQuestions * numberOfSubjects;
        scoresPerSubject = new int[numberOfSubjects];
        numberOfUnanswered = new int[numberOfSubjects];
        initializeNumberOfUnanswered();
        selectedAnswers = new int[total];
        realAnswers = new int[total];
        setTopPanel();
        //getRandomValues(50);
        getAllRandomValues();
        setMiddle();
    }
public QuestionsDialog(java.awt.Frame parent, boolean modal, Question[] questions, ResultInfo resultInfo)
{
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        getContentPane().setBackground(new Color(0,0,0));
        setTimeparameters(resultInfo.getQuestionInfo());
        previous.setEnabled(false);
        submit.setEnabled(false);
        info = resultInfo.getQuestionInfo();
        nameOfStudent = info.getNameOfStudent();
        sDialog = new submitDialog(new JFrame(), true);
        nameOfSubjects = info.getNameOfSubjects();
        numberOfSubjects = nameOfSubjects.length;
        numberOfQuestions = info.getNoOfQuestionsPerSubject();
        subjectButtons = new JRadioButton[numberOfSubjects];
        total = resultInfo.getTotal();
        scoresPerSubject = new int[numberOfSubjects];
        numberOfUnanswered = new int[numberOfSubjects];
        initializeNumberOfUnanswered();
        selectedAnswers = new int[total];
        realAnswers = new int[total];
        this.questions = questions;
        setTopPanel();
        setExistingMiddle();
}

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        topPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        middle = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        previous = new javax.swing.JButton();
        submit = new javax.swing.JButton();
        next = new javax.swing.JButton();
        timeRemaining = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        help = new javax.swing.JMenu();
        navigatrs = new javax.swing.JMenu();
        nextMenuItem = new javax.swing.JMenuItem();
        previousMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        submitMenuItem = new javax.swing.JMenuItem();
        subjectMenu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("UTMESOFT Taking Education to a greater height"); // NOI18N
        setBackground(new java.awt.Color(0, 0, 0));
        setResizable(false);

        topPanel.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout topPanelLayout = new javax.swing.GroupLayout(topPanel);
        topPanel.setLayout(topPanelLayout);
        topPanelLayout.setHorizontalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 410, Short.MAX_VALUE)
        );
        topPanelLayout.setVerticalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 53, Short.MAX_VALUE)
        );

        jScrollPane1.setPreferredSize(new java.awt.Dimension(602, 402));

        middle.setPreferredSize(new java.awt.Dimension(600, 400));

        javax.swing.GroupLayout middleLayout = new javax.swing.GroupLayout(middle);
        middle.setLayout(middleLayout);
        middleLayout.setHorizontalGroup(
            middleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 651, Short.MAX_VALUE)
        );
        middleLayout.setVerticalGroup(
            middleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 438, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(middle);

        jPanel1.setBackground(new java.awt.Color(150, 250, 12));

        jLabel1.setForeground(new java.awt.Color(51, 0, 0));
        jLabel1.setText("Navigators");

        jSeparator1.setForeground(new java.awt.Color(51, 0, 0));

        previous.setBackground(new java.awt.Color(255, 255, 0));
        previous.setFont(new java.awt.Font("Tahoma", 1, 12));
        previous.setIcon(new javax.swing.ImageIcon(getClass().getResource("/utme/left.gif"))); // NOI18N
        previous.setText("PREVIOUS");
        previous.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(51, 51, 0), new java.awt.Color(51, 51, 0), new java.awt.Color(153, 255, 255), new java.awt.Color(153, 255, 255)));
        previous.setRequestFocusEnabled(false);
        previous.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousActionPerformed(evt);
            }
        });

        submit.setBackground(new java.awt.Color(51, 51, 51));
        submit.setFont(new java.awt.Font("Tahoma", 1, 12));
        submit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/utme/middle.gif"))); // NOI18N
        submit.setText("SUBMIT");
        submit.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(51, 51, 0), new java.awt.Color(51, 51, 0), new java.awt.Color(153, 255, 255), new java.awt.Color(153, 255, 255)));
        submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitActionPerformed(evt);
            }
        });

        next.setBackground(new java.awt.Color(255, 255, 51));
        next.setFont(new java.awt.Font("Tahoma", 1, 12));
        next.setIcon(new javax.swing.ImageIcon(getClass().getResource("/utme/right.gif"))); // NOI18N
        next.setText("NEXT");
        next.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(51, 51, 0), new java.awt.Color(51, 51, 0), new java.awt.Color(153, 255, 255), new java.awt.Color(153, 255, 255)));
        next.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 597, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(94, 94, 94)
                .addComponent(previous)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 106, Short.MAX_VALUE)
                .addComponent(submit)
                .addGap(90, 90, 90)
                .addComponent(next)
                .addGap(84, 84, 84))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {next, previous, submit});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(submit)
                    .addComponent(previous)
                    .addComponent(next))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {next, previous, submit});

        timeRemaining.setBackground(new java.awt.Color(255, 255, 255));
        timeRemaining.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        timeRemaining.setForeground(new java.awt.Color(51, 51, 51));
        timeRemaining.setText("TIME REMAINING");
        timeRemaining.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.black, new java.awt.Color(0, 0, 0), java.awt.Color.black, java.awt.Color.black));
        timeRemaining.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeRemainingActionPerformed(evt);
            }
        });

        jMenuBar1.setBackground(new java.awt.Color(216, 32, 82));

        help.setBackground(new java.awt.Color(102, 255, 51));
        help.setForeground(new java.awt.Color(102, 0, 0));
        help.setText("Help");

        navigatrs.setForeground(new java.awt.Color(153, 102, 0));
        navigatrs.setText("Navigators");

        nextMenuItem.setForeground(new java.awt.Color(153, 102, 0));
        nextMenuItem.setText("Next");
        nextMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextMenuItemActionPerformed(evt);
            }
        });
        navigatrs.add(nextMenuItem);

        previousMenuItem.setForeground(new java.awt.Color(153, 102, 0));
        previousMenuItem.setText("Previous");
        previousMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousMenuItemActionPerformed(evt);
            }
        });
        navigatrs.add(previousMenuItem);

        jSeparator2.setForeground(new java.awt.Color(153, 102, 0));
        navigatrs.add(jSeparator2);

        submitMenuItem.setForeground(new java.awt.Color(153, 102, 0));
        submitMenuItem.setText("Submit");
        submitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitMenuItemActionPerformed(evt);
            }
        });
        navigatrs.add(submitMenuItem);

        help.add(navigatrs);

        subjectMenu.setForeground(new java.awt.Color(153, 102, 0));
        subjectMenu.setText("Subject Buttons");
        subjectMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subjectMenuActionPerformed(evt);
            }
        });
        help.add(subjectMenu);

        jMenuBar1.add(help);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(topPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(timeRemaining, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 611, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(timeRemaining, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE))
                    .addComponent(topPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void timeRemainingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeRemainingActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_timeRemainingActionPerformed

    private void nextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextActionPerformed
        // TODO add your handling code here:
        doNext();
        //submit.setEnabled(true);


        
    }//GEN-LAST:event_nextActionPerformed
    private void doNext()
    {
        if(tracker == 0)
        {
            previous.setEnabled(true);
        }
        if(tracker == total - 2 )
        {
            next.setEnabled(false);
            submit.setEnabled(true);
        }
         if(!wasFormallySelected)
        {
        update();
        }
        tracker++;
        card.next(middle);
        changeAllButtonsBackToGray();
        subjectButtons[tracker/numberOfQuestions].setSelected(true);
        subjectButtons[tracker/numberOfQuestions].setForeground(Color.red);
        checkIfWasFormallySelected();
    }
    private void previousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousActionPerformed
        // TODO add your handling code here:
        doPrevious();
    }//GEN-LAST:event_previousActionPerformed
    private void doPrevious()
    {
        if(tracker == 1)
        {
            previous.setEnabled(false);
        }
        if(tracker == total - 1)
        {
            next.setEnabled(true);
        }
          if(!wasFormallySelected)
        {
        update();
        }
        submit.setEnabled(false);
        tracker--;
        card.previous(middle);
        changeAllButtonsBackToGray();
        subjectButtons[tracker/numberOfQuestions].setSelected(true);
        subjectButtons[tracker/numberOfQuestions].setForeground(Color.red);
        checkIfWasFormallySelected();
    }
    private void doSubmit()
    {
        getSelectedIndex();
        getRealAnswers();
        getScores();
        ResultInfo resultInfo = new ResultInfo(score,pscore,total, scoresPerSubject, nameOfStudent, nameOfSubjects,info);
         ResultDialog dialog = new ResultDialog((JFrame)QuestionsDialog.this.getParent(), true, resultInfo, questionPanel, questions);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        //System.exit(0);
                    }
                });
                QuestionsDialog.this.dispose();
                dialog.setVisible(true);

    }
    private void submitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitActionPerformed
        // TODO add your handling code here:
        sDialog.setVisible(true);
        submitCondition =  sDialog.getCondition();
        if(submitCondition)
        {
           timer.stop();
           doSubmit();
        }

    }//GEN-LAST:event_submitActionPerformed

    private void nextMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextMenuItemActionPerformed
        // TODO add your handling code here:
        //JOptionPane.showMessageDialog(null, "next");
          Utility.paintAboutPage(AboutPages.Next, new JFrame(), true);

    }//GEN-LAST:event_nextMenuItemActionPerformed

    private void previousMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousMenuItemActionPerformed
        // TODO add your handling code here:
         Utility.paintAboutPage(AboutPages.Previous, new JFrame(), true);
    }//GEN-LAST:event_previousMenuItemActionPerformed

    private void submitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitMenuItemActionPerformed
        // TODO add your handling code here:
         Utility.paintAboutPage(AboutPages.Submit, new JFrame(), true);
    }//GEN-LAST:event_submitMenuItemActionPerformed

    private void subjectMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subjectMenuActionPerformed
        // TODO add your handling code here:
         Utility.paintAboutPage(AboutPages.SubjectButtons, new JFrame(), true);
    }//GEN-LAST:event_subjectMenuActionPerformed

    /**
    * @param args the command line arguments
    */
    /*public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                 String [] subjects = {"Economics"};
                 QuestionInfo info = new QuestionInfo(1,186,subjects, 30, "Sola");
                QuestionsDialog dialog = new QuestionsDialog(new javax.swing.JFrame(), true, info);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }8*/

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu help;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPanel middle;
    private javax.swing.JMenu navigatrs;
    private javax.swing.JButton next;
    private javax.swing.JMenuItem nextMenuItem;
    private javax.swing.JButton previous;
    private javax.swing.JMenuItem previousMenuItem;
    private javax.swing.JMenuItem subjectMenu;
    private javax.swing.JButton submit;
    private javax.swing.JMenuItem submitMenuItem;
    private javax.swing.JButton timeRemaining;
    private javax.swing.JPanel topPanel;
    // End of variables declaration//GEN-END:variables
private QuestionPanel questionPanel[];
private boolean englishIsPresent = false;
    private void setTopPanel()
    {
        topPanel.setLayout(new FlowLayout());
        initializeSubjectButtons();
        
    }

    private void initializeSubjectButtons()
    {
        for(int i = 0; i < nameOfSubjects.length; i++)
        {
            if(nameOfSubjects[i].equals("English"))
            {
                englishIsPresent = true;
            }
            subjectButtons[i] = new JRadioButton(nameOfSubjects[i] + ": " + numberOfUnanswered[i]);
            subjectButtons[i].setBackground(new Color(102,255,0));
            subjectButtons[i].setForeground(new Color(51,0,0));
            topPanel.add(subjectButtons[i]);
            subjectButtonsGroup.add(subjectButtons[i]);
            subjectButtons[i].setToolTipText(nameOfSubjects[i] + " with number of yet to be answerd questions");
            final int index = i;
            subjectButtons[i].addActionListener(new ActionListener()
            {
                public void actionPerformed(ActionEvent e)
                {
                    card.show(middle, "" + (index * numberOfQuestions + 1));
                    changeAllButtonsBackToGray();
                    subjectButtons[index].setForeground(Color.red);
                       if(!wasFormallySelected)
        {
        update();
        }
                    tracker = index * numberOfQuestions;
                    checkIfWasFormallySelected();
                    submit.setEnabled(false);
                    if(e.getSource().equals(subjectButtons[0]))
                    {
                        previous.setEnabled(false);
                        next.setEnabled(true);
                    }
                    else
                    {
                        previous.setEnabled(true);
                        next.setEnabled(true);
 }

                }

            });
        }
        subjectButtons[0].setSelected(true);
        subjectButtons[0].setForeground(Color.red);
    }

    private void getAllRandomValues()
    {
        String [] subjectCodes = new String[numberOfSubjects];
        questionNames = new String[numberOfQuestions * numberOfSubjects];
        for(int i = 0; i < subjectCodes.length; i++)
        {
            subjectCodes[i] = Utility.getSubjectCode(nameOfSubjects[i]);
            addSpecificSubjectCode(subjectCodes[i], i, nameOfSubjects[i]);
        }
         }
    
    private int[] getRandomValues(int numberOfAvailableQuestions, int numberOfQ)
    {
         //numberOfQuestions = info.getNoOfQuestionsPerSubject();
         int questionNumbers[] = new int[numberOfQ];
          rand = new Random();
         Set<Integer> random = new HashSet<Integer>();
         while(random.size() < numberOfQ)
         {
            int temp = rand.nextInt(numberOfAvailableQuestions);
            boolean isAccepted =  random.add(temp);
            
            if(isAccepted)
            {
                int index = random.size() - 1;
               questionNumbers[index] = temp + 1;
               //System.out.println(questionNumbers[index]);
            }
         }
         return questionNumbers;
    }

    private void addSpecificSubjectCode(String code, int givenIndex, String name)
    {
        int index = givenIndex * numberOfQuestions;
        int [] questionNumbers = getRandomValues(Utility.getAvailableNumberOfQuestions(name), numberOfQuestions);
        for(int i = 0; i < numberOfQuestions; i++)
        {
            questionNames[index + i] = code + questionNumbers[i]+ ".txt";
            System.out.println(questionNames[index + i]);
        }
    }

    private void setMiddle()
    {
        card = new CardLayout();
        middle.setLayout(card);
        getAndAddMiddlePanels();
    }

    private void getAndAddMiddlePanels()
    {
        Random random1 = new Random();
        int comprehensionNumber = 1 + random1.nextInt(Utility.availableNumberOfComprehension());
        //comprehensionNumber = 1;
        //int [] type = getRandomValues(Utility.getAvailableNumberOfQuestionTypeForEnglish(), (numberOfQuestions-5)/5);
        int presentType = 1;
        questions = new Question[numberOfQuestions * numberOfSubjects];
        setQuestionPanel(comprehensionNumber, presentType);
    }
    private void setQuestionPanel(int comprehensionNumber, int presentType)
    {
      questionPanel = new QuestionPanel[numberOfQuestions * numberOfSubjects];
      for(int i = 0; i < questionPanel.length; i++)
      {
          if(questionNames[i].contains("en") && i < 5)
          {
                questions[i] = new Comprehension(comprehensionNumber,(i+1), (i+1) );
                questionPanel[i] = new ComprehensionQuestion((Comprehension)questions[i], (i+1));
                middle.add(questionPanel[i], "" + (i+1));
          }
          else if(questionNames[i].contains("en") && (i >= 5))
          {
              questions[i] = new Question(questionNames[i], presentType);
              questionPanel[i] = new QuestionPanel(questions[i], (i + 1));
              middle.add(questionPanel[i], "" + (i+1));
          }
            else
          {
          questions[i] = new Question(questionNames[i]);
          questionPanel[i] = new QuestionPanel(questions[i], (i + 1));
          middle.add(questionPanel[i], "" + (i+1));
          }
      }
    }
private void setExistingQuestionsToQuestionPanels()
    {
      questionPanel = new QuestionPanel[numberOfQuestions * numberOfSubjects];
      questionNames = new String[numberOfQuestions * numberOfSubjects];
      for(int i = 0; i < questionPanel.length; i++)
      {
          questionNames[i] = questions[i].getQuestionName();
          if(questions[i] instanceof Comprehension)
          {
                //questions[i] = new Comprehension(comprehensionNumber,(i+1), (i+1) );
                questionPanel[i] = new ComprehensionQuestion((Comprehension)questions[i], (i+1));
                middle.add(questionPanel[i], "" + (i+1));
          }
          else if(questionNames[i].contains("en"))
          {
              questionPanel[i] = new QuestionPanel(questions[i], (i + 1));
              middle.add(questionPanel[i], "" + (i+1));
          }
            else
          {
          //questions[i] = new Question(questionNames[i]);
          questionPanel[i] = new QuestionPanel(questions[i], (i + 1));
          middle.add(questionPanel[i], "" + (i+1));
          }
      }
}
    private void changeAllButtonsBackToGray()
    {
       for(JRadioButton but:subjectButtons)
       {
           but.setForeground(new Color(51, 0, 0));
       }
    }

    private void getSelectedIndex()
    {
        for(int i =0; i < selectedAnswers.length; i++)
        {
            selectedAnswers[i] = questionPanel[i].getSelectedIndex();
        }
    }

    private void getRealAnswers()
    {
           for(int i =0; i < realAnswers.length; i++)
           {
               realAnswers[i] = questionPanel[i].getAnswer();
               //System.out.println(realAnswers.length);
           }
    }

    private void getScores()
    {
        initializeScoresPerSubjectArray();
        for(int i =0; i < realAnswers.length; i++)
        {
            if(realAnswers[i] == selectedAnswers[i])
            {
                score++;
                scoresPerSubject[i/numberOfQuestions]++;
            }
        }
        System.out.println(score);
        pscore = (score * 100)/total;
        for(int scor:scoresPerSubject)
        {
            System.out.println(scor);
        }
    }

    private void initializeScoresPerSubjectArray()
    {
      for(int i =0; i < scoresPerSubject.length; i++)
      {
          scoresPerSubject[i] = 0;
      }
    }

    private void initializeNumberOfUnanswered() {
        for(int i = 0; i < numberOfUnanswered.length; i++)
        {
            numberOfUnanswered[i] = numberOfQuestions;
        }
    }

    private void update()
    {
        if(questionPanel[tracker].getSelectedIndex() != -1)
        {
            int  i = tracker/numberOfQuestions;
            numberOfUnanswered[i]--;
            subjectButtons[i].setText(nameOfSubjects[i] + ": " + numberOfUnanswered[i]);
        }
    }

    private void checkIfWasFormallySelected() {
        if(questionPanel[tracker].getSelectedIndex() != -1)
        {
            wasFormallySelected = true;
        }
 else
            wasFormallySelected = false;
    }

    private void setExistingMiddle()
    {
         card = new CardLayout();
        middle.setLayout(card);
        getAndAddExistingMiddlePanels();
    }

    private void getAndAddExistingMiddlePanels()
    {
    setExistingQuestionsToQuestionPanels();
    }

    private void setTimeparameters(QuestionInfo questionInfo)
    {
        format =  NumberFormat.getIntegerInstance();
        format.setMinimumIntegerDigits(2);
        time = questionInfo.getTime();
        hr = time/60;
        min = time%60;
        sec = 0;
        //hr = 1;
        //min = 60;
        //sec = 0;
        setTimerLabel();
       // hr = 0;
        //min = 0;
        //sec = 15;
    }

    private void setTimerLabel()
    {
        timeRemaining.setText("TIME REMAINING: " + format.format(hr) + ":" + format.format(min) + ":" + format.format(sec));
        TimerCount count = new TimerCount();
        timer = new Timer(1000, count);
        timer.start();
    }
    private class TimerCount implements ActionListener
    {
    public void actionPerformed(ActionEvent ev)
    {
        timeRemaining.setText("TIME REMAINING: " + format.format(hr) + ":" + format.format(min) + ":" + format.format(sec));
        if(sec == 0 && min == 0 && hr == 0)
        {
            timer.stop();
            if(sDialog.isVisible())
            {
                sDialog.setVisible(false);
            }
            //JOptionPane.showMessageDialog(null,  "Your time is up", "UTMESOFT", JOptionPane.INFORMATION_MESSAGE, Utility.getIcon());
            doSubmit();

        }
        if(sec == 0)
        {
            sec = 59;
            min--;
        }
        else
        {
            sec--;
        }
        if(min == -1 && sec == 59)
        {
            min = 59;
            hr--;
        }
        
        
        
    }
    }
}
