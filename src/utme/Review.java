/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Review.java
 *
 * Created on Nov 23, 2012, 9:59:38 AM
 */

package utme;

/**
 *
 * @author ADmin
 */
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.HashSet;
import javax.swing.ButtonGroup;
import javax.swing.JRadioButton;
import java.util.Random;
import java.util.Set;
import javax.swing.JFrame;
import javax.swing.JLabel;
public class Review extends javax.swing.JDialog {

    private String []nameOfSubjects;
    private JRadioButton [] subjectButtons;
    private ButtonGroup subjectButtonsGroup = new ButtonGroup();
    private QuestionInfo info;
    private ResultInfo rinfo;
    private int numberOfQuestions, numberOfSubjects;
    private String questionNames[];
    private CardLayout card;
    private int tracker = 0;
    private int total;
    private int selectedAnswers[];
    private int score = 0;
    private int scoresPerSubject[];
    private int realAnswers[];
    private int pscore;
    private Question questions[];
    private boolean isItRight[];
    private CardLayout card2;
    private JLabel[] labels;

    /** Creates new form Review */
    public Review(java.awt.Frame parent, boolean modal, ResultInfo rinfo, QuestionPanel[] questionPanel, Question[] questions ) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        previous.setEnabled(false);
        getContentPane().setBackground(new Color(0,0,0));
        //submit.setEnabled(true);
        this.rinfo = rinfo;
        this.info = rinfo.getQuestionInfo();
        nameOfSubjects = info.getNameOfSubjects();
        numberOfSubjects = nameOfSubjects.length;
        numberOfQuestions = info.getNoOfQuestionsPerSubject();
        subjectButtons = new JRadioButton[numberOfSubjects];
        total = numberOfQuestions * numberOfSubjects;
        scoresPerSubject = new int[numberOfSubjects];
        selectedAnswers = new int[total];
        realAnswers = new int[total];
        this.questionPanel = questionPanel;
        this.questions = questions;
        isItRight = new boolean[total];
        setTopPanel();
        //getRandomValues(50);
        //getAllRandomValues();
        setMiddle();
        //setMiddleBottom();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        topPanel = new javax.swing.JPanel();
        previous = new javax.swing.JButton();
        next = new javax.swing.JButton();
        takeSameExam = new javax.swing.JButton();
        takeAnotherExam = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        middleBottom = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        middle = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        topPanel.setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout topPanelLayout = new javax.swing.GroupLayout(topPanel);
        topPanel.setLayout(topPanelLayout);
        topPanelLayout.setHorizontalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 393, Short.MAX_VALUE)
        );
        topPanelLayout.setVerticalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 46, Short.MAX_VALUE)
        );

        previous.setBackground(new java.awt.Color(0, 51, 0));
        previous.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        previous.setText("PREVIOUS");
        previous.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousActionPerformed(evt);
            }
        });

        next.setBackground(new java.awt.Color(0, 51, 0));
        next.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        next.setText("NEXT");
        next.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextActionPerformed(evt);
            }
        });

        takeSameExam.setBackground(new java.awt.Color(0, 153, 0));
        takeSameExam.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        takeSameExam.setText("take same Exam");
        takeSameExam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                takeSameExamActionPerformed(evt);
            }
        });

        takeAnotherExam.setBackground(new java.awt.Color(0, 153, 0));
        takeAnotherExam.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        takeAnotherExam.setText("take another Exam");
        takeAnotherExam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                takeAnotherExamActionPerformed(evt);
            }
        });

        middleBottom.setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout middleBottomLayout = new javax.swing.GroupLayout(middleBottom);
        middleBottom.setLayout(middleBottomLayout);
        middleBottomLayout.setHorizontalGroup(
            middleBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 650, Short.MAX_VALUE)
        );
        middleBottomLayout.setVerticalGroup(
            middleBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 23, Short.MAX_VALUE)
        );

        middle.setPreferredSize(new java.awt.Dimension(600, 400));

        javax.swing.GroupLayout middleLayout = new javax.swing.GroupLayout(middle);
        middle.setLayout(middleLayout);
        middleLayout.setHorizontalGroup(
            middleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 648, Short.MAX_VALUE)
        );
        middleLayout.setVerticalGroup(
            middleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 404, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(middle);

        jMenu2.setText("Help");

        jMenu1.setText("Navigator");

        jMenuItem2.setText("Next");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setText("Previous");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);
        jMenu1.add(jSeparator3);

        jMenuItem4.setText("Submit");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenu2.add(jMenu1);

        jMenuItem1.setText("Subject Buttons");
        jMenu2.add(jMenuItem1);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSeparator2, javax.swing.GroupLayout.DEFAULT_SIZE, 650, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(previous)
                        .addGap(18, 18, 18)
                        .addComponent(next)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 156, Short.MAX_VALUE)
                        .addComponent(takeSameExam)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(takeAnotherExam))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(middleBottom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(topPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 650, Short.MAX_VALUE)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {next, previous});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(topPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(middleBottom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(previous)
                        .addComponent(next))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(takeAnotherExam)
                        .addComponent(takeSameExam)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {next, previous, takeAnotherExam, takeSameExam});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void previousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousActionPerformed
        // TODO add your handling code here:
                if(tracker == 1)
        {
            previous.setEnabled(false);
        }
        if(tracker == total - 1)
        {
            next.setEnabled(true);
        }
        //submit.setEnabled(false);
        tracker--;
        card.previous(middle);
        card2.previous(middleBottom);
        changeAllButtonsBackToGray();
        subjectButtons[tracker/numberOfQuestions].setSelected(true);
        subjectButtons[tracker/numberOfQuestions].setForeground(Color.red);

    }//GEN-LAST:event_previousActionPerformed

    private void takeSameExamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_takeSameExamActionPerformed
        // TODO add your handling code here:
        QuestionsDialog dialog = new QuestionsDialog(new javax.swing.JFrame(), true,questions, rinfo);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        //System.exit(0);
                    }
                });
                Review.this.dispose();
                dialog.setVisible(true);
                
    }//GEN-LAST:event_takeSameExamActionPerformed

    private void takeAnotherExamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_takeAnotherExamActionPerformed
        // TODO add your handling code here:
        QuestionsDialog dialog = new  QuestionsDialog(new javax.swing.JFrame(), true, info);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        //System.exit(0);
                    }
                });
                Review.this.dispose();
                dialog.setVisible(true);
                

    }//GEN-LAST:event_takeAnotherExamActionPerformed

    private void nextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextActionPerformed
        // TODO add your handling code here:
        doNext();
    }//GEN-LAST:event_nextActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        Utility.paintAboutPage(AboutPages.Next, new JFrame(), true);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        Utility.paintAboutPage(AboutPages.Previous, new JFrame(), true);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        Utility.paintAboutPage(AboutPages.Submit, new JFrame(), true);
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    /**
    * @param args the command line arguments
    */
    /*public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                String [] subjects = {"English","Mathematics", "Physics", "Biology"};
                 QuestionInfo info = new QuestionInfo(4,5,subjects, 3000);
                Review dialog = new Review(new javax.swing.JFrame(), true, info);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }*/

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPanel middle;
    private javax.swing.JPanel middleBottom;
    private javax.swing.JButton next;
    private javax.swing.JButton previous;
    private javax.swing.JButton takeAnotherExam;
    private javax.swing.JButton takeSameExam;
    private javax.swing.JPanel topPanel;
    // End of variables declaration//GEN-END:variables

    private QuestionPanel questionPanel[];
    private void doNext()
    {
           if(tracker == 0)
        {
            previous.setEnabled(true);
        }
        if(tracker == total - 2 )
        {
            next.setEnabled(false);
            //submit.setEnabled(true);
        }

        tracker++;
        card.next(middle);
        card2.next(middleBottom);
        changeAllButtonsBackToGray();
        subjectButtons[tracker/numberOfQuestions].setSelected(true);
        subjectButtons[tracker/numberOfQuestions].setForeground(Color.red);
    }
    private void setTopPanel()
    {
        topPanel.setLayout(new FlowLayout());
        initializeSubjectButtons();

    }

    private void initializeSubjectButtons()
    {
        for(int i = 0; i < nameOfSubjects.length; i++)
        {
            subjectButtons[i] = new JRadioButton(nameOfSubjects[i]);
            subjectButtons[i].setBackground(new Color(102,255,0));
            subjectButtons[i].setForeground(new Color(51,0,0));
            topPanel.add(subjectButtons[i]);
            subjectButtonsGroup.add(subjectButtons[i]);
            final int index = i;
            subjectButtons[i].addActionListener(new ActionListener()
            {
                public void actionPerformed(ActionEvent e)
                {
                    card.show(middle, "" + (index * numberOfQuestions + 1));
                    card2.show(middleBottom, "" + (index * numberOfQuestions + 1));
                    changeAllButtonsBackToGray();
                    subjectButtons[index].setForeground(Color.red);
                    tracker = index * numberOfQuestions;
                   // submit.setEnabled(false);
                    if(e.getSource().equals(subjectButtons[0]))
                    {
                        previous.setEnabled(false);
                        next.setEnabled(true);
                    }
 else
                    {
                        previous.setEnabled(true);
                        next.setEnabled(true);
 }

                }

            });
        }
        subjectButtons[0].setSelected(true);
        subjectButtons[0].setForeground(Color.red);
    }

    /*private void getAllRandomValues()
    {
        String [] subjectCodes = new String[numberOfSubjects];
        questionNames = new String[numberOfQuestions * numberOfSubjects];
        for(int i = 0; i < subjectCodes.length; i++)
        {
            subjectCodes[i] = Utility.getSubjectCode(nameOfSubjects[i]);
            addSpecificSubjectCode(subjectCodes[i], i, nameOfSubjects[i]);
        }
    }*/

    /*private int[] getRandomValues(int numberOfAvailableQuestions)
    {
         //numberOfQuestions = info.getNoOfQuestionsPerSubject();
         int questionNumbers[] = new int[numberOfQuestions];
         Random rand = new Random();
         Set<Integer> random = new HashSet<Integer>();
         while(random.size() < numberOfQuestions)
         {
            int temp = rand.nextInt(numberOfAvailableQuestions);
            boolean isAccepted =  random.add(temp);

            if(isAccepted)
            {
                int index = random.size() - 1;
               questionNumbers[index] = temp + 1;
               //System.out.println(questionNumbers[index]);
            }
         }
         return questionNumbers;
    }*/

    /*private void addSpecificSubjectCode(String code, int givenIndex, String name)
    {
        int index = givenIndex * numberOfQuestions;
        int [] questionNumbers = getRandomValues(Utility.getAvailableNumberOfQuestions(name));
        for(int i = 0; i < numberOfQuestions; i++)
        {
            questionNames[index + i] = code + questionNumbers[i]+ ".txt";
            System.out.println(questionNames[index + i]);
        }
    }*/

    private void setMiddle()
    {
        card = new CardLayout();
        middle.setLayout(card);
        card2 = new CardLayout();
        middleBottom.setLayout(card2);
        getAndAddMiddlePanels();
    }

    private void getAndAddMiddlePanels()
    {
      getSelectedIndex();
      getRealAnswers();
      getScores();
      for(int i = 0; i < questionPanel.length; i++)
      {
          changeAllOptions(questionPanel[i], realAnswers[i]);
          middle.add(questionPanel[i], "" + (i+1));

      }
    }

    private void changeAllButtonsBackToGray()
    {
       for(JRadioButton but:subjectButtons)
       {
          but.setBackground(new Color(102,255,0));
            //subjectButtons[i].setForeground(new Color(51,0,0));
       }
    }

    private void getSelectedIndex()
    {
        for(int i =0; i < selectedAnswers.length; i++)
        {
            selectedAnswers[i] = questionPanel[i].getSelectedIndex();
        }
    }

    private void getRealAnswers()
    {
           for(int i =0; i < realAnswers.length; i++)
           {
               realAnswers[i] = questionPanel[i].getAnswer();
               //System.out.println(realAnswers.length);
           }
    }

    private void getScores()
    {
        initializeScoresPerSubjectArray();
        labels = new JLabel[total];
        char aToE[] = {'A', 'B', 'C', 'D', 'E'};
        for(int i =0; i < realAnswers.length; i++)
        {
            if(realAnswers[i] == selectedAnswers[i])
            {
                labels[i] = new JLabel("YOU GOT IT RIGHT!");
                labels[i].setOpaque(false);
                labels[i].setForeground(new Color(0,0, 255));
                isItRight[i] = true;
                score++;
                scoresPerSubject[i/numberOfQuestions]++;
            }
            else if(selectedAnswers[i] == -1)
            {
                labels[i] = new JLabel("YOU DID NOT CHOOSE ANYTHING");
                labels[i].setOpaque(false);
                labels[i].setForeground(new Color(0,0, 255));
            }
            else
            {
                labels[i] = new JLabel("YOU WERE WRONG! YOU CHOOSE " + aToE[selectedAnswers[i] - 1]);
                labels[i].setOpaque(false);
                labels[i].setForeground(new Color(0,0, 255));
            }
            middleBottom.add(labels[i], "" + (i +1));
        }
        System.out.println(score);
        pscore = (score * 100)/total;
        for(int scor:scoresPerSubject)
        {
            System.out.println(scor);
        }
    }

    private void initializeScoresPerSubjectArray()
    {
      for(int i =0; i < scoresPerSubject.length; i++)
      {
          scoresPerSubject[i] = 0;
      }
    }

    private void changeAllOptions(QuestionPanel questionPanel, int realAnswer)
    {
        questionPanel.clear();
        questionPanel.selectSpecific(realAnswer);
    }
}
