/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Customizer.java
 *
 * Created on Nov 24, 2012, 9:41:13 PM
 */

package utme;

import java.awt.Color;
import java.awt.GridLayout;
import java.util.ArrayList;
import java.util.Iterator;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author ADmin
 */
public class Customizer extends javax.swing.JPanel {
    private JCheckBox[] subjectBox;
    private int numberOfSubjects = 0;
    private String nameOfStudent;
    private boolean isNameValid;
    private String timeInMin;
    private boolean isTimeValid = false;
    private int numberOfQuestionsPerSubject;

    /** Creates new form Customizer */
    public Customizer() {
        initComponents();
        setSubjectPanel();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        englishCheck = new javax.swing.JCheckBox();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        timeField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        numberOfQuestionsCombo = new javax.swing.JComboBox();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        start = new javax.swing.JButton();
        subjectPanel = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 204, 0));
        setPreferredSize(new java.awt.Dimension(228, 463));

        englishCheck.setForeground(new java.awt.Color(0, 0, 204));
        englishCheck.setText("ENGLISH LANGUAGE");
        englishCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                englishCheckActionPerformed(evt);
            }
        });

        jLabel1.setForeground(new java.awt.Color(0, 0, 153));
        jLabel1.setText("Time in minutes");

        jLabel2.setForeground(new java.awt.Color(0, 0, 153));
        jLabel2.setText("Number of Questions:");

        numberOfQuestionsCombo.setForeground(new java.awt.Color(255, 51, 51));
        numberOfQuestionsCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "10", "20", "30", "40", "50" }));

        jLabel3.setForeground(new java.awt.Color(0, 0, 153));
        jLabel3.setText("Name:");

        nameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameFieldActionPerformed(evt);
            }
        });

        jLabel4.setForeground(new java.awt.Color(0, 0, 204));
        jLabel4.setText("CHOOSE SUBJECTS:");

        start.setFont(new java.awt.Font("Sylfaen", 1, 24));
        start.setForeground(new java.awt.Color(0, 0, 204));
        start.setText("START");
        start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startActionPerformed(evt);
            }
        });

        subjectPanel.setOpaque(false);

        javax.swing.GroupLayout subjectPanelLayout = new javax.swing.GroupLayout(subjectPanel);
        subjectPanel.setLayout(subjectPanelLayout);
        subjectPanelLayout.setHorizontalGroup(
            subjectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 225, Short.MAX_VALUE)
        );
        subjectPanelLayout.setVerticalGroup(
            subjectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 230, Short.MAX_VALUE)
        );

        jLabel5.setForeground(new java.awt.Color(255, 0, 0));
        jLabel5.setText("CUSTOMIZED EXAM");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSeparator3, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                        .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(numberOfQuestionsCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(timeField, javax.swing.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(start))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(englishCheck)))
                .addContainerGap())
            .addComponent(subjectPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addContainerGap(78, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(subjectPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(englishCheck)
                .addGap(7, 7, 7)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(timeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(numberOfQuestionsCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(start, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void englishCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_englishCheckActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_englishCheckActionPerformed

    private void nameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameFieldActionPerformed

    private void startActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startActionPerformed
        // TODO add your handling code here:
        checkValidity();
    }//GEN-LAST:event_startActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox englishCheck;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTextField nameField;
    private javax.swing.JComboBox numberOfQuestionsCombo;
    private javax.swing.JButton start;
    private javax.swing.JPanel subjectPanel;
    private javax.swing.JTextField timeField;
    // End of variables declaration//GEN-END:variables

    private void setSubjectPanel()
    {
        String subjects [] = Utility.getSubjectTypes();
        int len = subjects.length;
        subjectPanel.setLayout(new GridLayout(len, 1));
        subjectBox  = new JCheckBox[len];
        for(int i = 0; i < len; i++)
        {
            subjectBox[i] = new JCheckBox(subjects[i]);
            subjectBox[i].setForeground(Color.BLUE);
            subjectBox[i].setOpaque(false);
            subjectPanel.add(subjectBox[i]);
        }
    }

    private void checkValidity() {
        checkNumberOfSubjectsSelected();
        checkNameValidity();
        checkTimeValidity();
        if(numberOfSubjects < 1 )
        {
            //MyOptionPane pane = new MyOptionPane();
            JOptionPane.showMessageDialog(null, "Please choose a subject", "UTMESOFT", JOptionPane.INFORMATION_MESSAGE, Utility.getIcon());
        }
        else if( numberOfSubjects > 4)
        {
       JOptionPane.showMessageDialog(null,  "Subjects chosen can not be more than four", "UTMESOFT", JOptionPane.INFORMATION_MESSAGE, Utility.getIcon());

        }
       else  if(!isNameValid)
        {
           JOptionPane.showMessageDialog(null, "Enter two of your names with a space in between", "UTMESOFT", JOptionPane.INFORMATION_MESSAGE, Utility.getIcon());
       }
        else if(!isTimeValid)
        {
            JOptionPane.showMessageDialog(null, "Time must be between 5 and 180", "UTMESOFT", JOptionPane.INFORMATION_MESSAGE, Utility.getIcon());
        }
        else
        {
            //JOptionPane.showMessageDialog(Customizer.this, "success");
            buildQuestionInfo();
        }
    }

    private void checkNumberOfSubjectsSelected()
    {
        numberOfSubjects =  0;
        for(int i = 0; i < subjectBox.length; i++)
        {
            if(subjectBox[i].isSelected() == true)
            {
                numberOfSubjects++;
            }
        }
        if(englishCheck.isSelected())
        {
                numberOfSubjects++;
        }
    }

    private void checkNameValidity()
    {
        nameOfStudent = nameField.getText();
        String reg = "[A-Za-z]{2,}[ ][A-Za-z]{2,}";
        isNameValid = nameOfStudent.matches(reg);
    }

    private void checkTimeValidity()
    {
        timeInMin = timeField.getText();
        String reg = "[0-9]+";
        if(timeInMin.matches(reg))
        {
            int time = Integer.parseInt(timeInMin);
            if(time > 5 && time < 180)
            {
            isTimeValid  = true;
            }
        }
    }

    private void buildQuestionInfo()
    {
        numberOfQuestionsPerSubject =(numberOfQuestionsCombo.getSelectedIndex() + 1) * 10;
        nameOfStudent = nameField.getText();
        String [] subjectNames = getSelectedSubjects();
        int time = Integer.parseInt(timeInMin);
        int hr = time/60;
        int min = time%60;
        int sec = 0;
        QuestionInfo questionInfo = new QuestionInfo(numberOfSubjects, numberOfQuestionsPerSubject,  subjectNames, Integer.parseInt(timeInMin), nameOfStudent);
        String information = "<html><b><font color=#ff0000>Dear " + nameOfStudent + ", You have chosen " + numberOfSubjects + " subjects ";
        for(int i =0; i < subjectNames.length; i++)
        {
            information += ("           <br><font color=#0000ff>" + subjectNames[i]);
        }
        information += ("           <br><font color=#0000ff>Time: " + hr + " hrs " + min + " mins " + sec + " secs");
        information += ("           <br><font color=#000000>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    Click yes to continue");
        int n = JOptionPane.showConfirmDialog(null, information, "UTMESOFT", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE, Utility.getIcon());
           if(n == 0)
           {
                QuestionsDialog dialog = new QuestionsDialog(new JFrame(), true, questionInfo);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        //System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
    }

    private String[] getSelectedSubjects()
    {
      String selectedSubjects [] = new String[numberOfSubjects];
      ArrayList<String> sub = new ArrayList<String>();
      if(englishCheck.isSelected())
      {
          selectedSubjects[0] = "English";
          if(numberOfSubjects > 1)
          {
              for(int i = 0; i < subjectBox.length; i++)
              {
                  if(subjectBox[i].isSelected())
                  {
                      sub.add(subjectBox[i].getText());
                  }
              }
              Iterator iterate = sub.iterator();
              int i = 1;
              while(iterate.hasNext())
              {
                  selectedSubjects[i] = (String)iterate.next();
                  i++;
              }
          }
      }
      else
      {
          for(int i = 0; i < subjectBox.length; i++)
              {
                  if(subjectBox[i].isSelected())
                  {
                      sub.add(subjectBox[i].getText());
                  }
              }
              Iterator iterate = sub.iterator();
              int i = 0;
              while(iterate.hasNext())
              {
                  selectedSubjects[i] = (String)iterate.next();
                  i++;
              }
      }
      return selectedSubjects;
    }

}
