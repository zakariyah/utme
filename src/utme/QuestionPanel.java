/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * QuestionPanel.java
 *
 * Created on Nov 22, 2012, 2:45:26 PM
 */

package utme;

import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.GridLayout;
import java.io.IOException;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;

/**
 *
 * @author ADmin
 */
public class QuestionPanel extends javax.swing.JPanel {

    /** Creates new form QuestionPanel */
    private Question questionObject;
    private int questionNumber;
    private JRadioButton[] options;
    private int noOfOptions;
    private ButtonGroup optionGroup;
    private URL myurl;
   
    public QuestionPanel(Question questionObject, int questionNumber)
    {
        this.questionObject = questionObject;
        this.questionNumber = questionNumber;
        noOfOptions = questionObject.getNoOfOptions();
        initComponents();
        optionGroup = new ButtonGroup();
        setOptionPanel();
        setInstructionAndQuestion();
    }
    public QuestionPanel()
    {
        //this.questionObject = questionObject;
        //this.questionNumber = questionNumber;
        //noOfOptions = questionObject.getNoOfOptions();
        //optionGroup = new ButtonGroup();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        instructionArea = new javax.swing.JTextArea();
        questionLabel = new javax.swing.JLabel();
        optionsPanel = new javax.swing.JPanel();
        questionPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        questionArea = new javax.swing.JEditorPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        questionTextArea = new javax.swing.JTextArea();

        setBackground(new java.awt.Color(255, 255, 0));

        jLabel1.setBackground(new java.awt.Color(51, 0, 0));
        jLabel1.setForeground(new java.awt.Color(51, 0, 0));
        jLabel1.setText("INSTRUCTION");

        jScrollPane1.setBackground(new java.awt.Color(51, 0, 0));

        instructionArea.setColumns(20);
        instructionArea.setEditable(false);
        instructionArea.setRows(5);
        instructionArea.setMinimumSize(new java.awt.Dimension(21, 21));
        jScrollPane1.setViewportView(instructionArea);

        questionLabel.setBackground(new java.awt.Color(51, 0, 0));
        questionLabel.setForeground(new java.awt.Color(51, 0, 0));
        questionLabel.setText("QUESTION");

        optionsPanel.setOpaque(false);

        javax.swing.GroupLayout optionsPanelLayout = new javax.swing.GroupLayout(optionsPanel);
        optionsPanel.setLayout(optionsPanelLayout);
        optionsPanelLayout.setHorizontalGroup(
            optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 418, Short.MAX_VALUE)
        );
        optionsPanelLayout.setVerticalGroup(
            optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 105, Short.MAX_VALUE)
        );

        questionPanel.setPreferredSize(new java.awt.Dimension(428, 35));
        questionPanel.setLayout(new java.awt.CardLayout());

        questionArea.setEditable(false);
        jScrollPane2.setViewportView(questionArea);

        questionPanel.add(jScrollPane2, "card2");

        questionTextArea.setColumns(20);
        questionTextArea.setEditable(false);
        questionTextArea.setRows(5);
        jScrollPane3.setViewportView(questionTextArea);

        questionPanel.add(jScrollPane3, "card3");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(optionsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addComponent(questionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 428, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 428, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(questionLabel)
                            .addComponent(jLabel1))
                        .addContainerGap(359, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(questionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(questionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(optionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea instructionArea;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPanel optionsPanel;
    private javax.swing.JEditorPane questionArea;
    private javax.swing.JLabel questionLabel;
    private javax.swing.JPanel questionPanel;
    private javax.swing.JTextArea questionTextArea;
    // End of variables declaration//GEN-END:variables
        private void setOptionPanel()
        {
        options = new JRadioButton[noOfOptions];
        optionsPanel.setLayout(new GridLayout(noOfOptions,1));
        addOptionsToBottom() ;
       // System.out.println(noOfOptions);
        }
        private void addOptionsToBottom()
        {
        String [] optionArray = questionObject.getOptions();
        for(int i = 0; i < optionArray.length; i++)
        {
                options[i] = new JRadioButton("<html><b>" + optionArray[i]+ "</b>");
                //options[i].setOpaque(false);
                options[i].setBackground(Color.YELLOW);
               optionsPanel.add(options[i]);
                optionGroup.add(options[i]);
        }
        }

    private void setInstructionAndQuestion() {
        myurl = QuestionPanel.class.getResource("Questions/" + (questionObject.getQuestionName()) +".html");
        //System.out.println(myurl);
        CardLayout card = (CardLayout)questionPanel.getLayout();
        questionLabel.setText("QUESTION: " + questionNumber);
        if(myurl != null)
        {
            try
            {
                questionArea.setPage(myurl);
                System.out.println(myurl);
                card.show(questionPanel,"card2");
                //setText(questionObject.getQuestion());
            }
            catch (IOException ex) {
                Logger.getLogger(QuestionPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else
        {
            Utility.area(questionTextArea);
            questionTextArea.setText( questionObject.getQuestion());
            card.show(questionPanel,"card3");
        }
        instructionArea.setText(questionObject.getInstruction());
        //Utility.setTextArea(questionArea);
        Utility.area(instructionArea);
        //Utility.setTextArea(instructionArea);
    }
    public int getSelectedIndex()
    {
       int selected = -1;
       for(int i=0; i< options.length; i++)
       {
           if(options[i].isSelected())
           {
               selected = i + 1;
           }
       }
       return selected;
    }
    public int getAnswer()
    {
        int s = questionObject.getAnswer();
        return s;
    }
    public void clear()
    {
        optionGroup.clearSelection();
        for(JRadioButton but:options)
        {
            but.setEnabled(false);
        }
    }
    public void clearSelection()
    {
        optionGroup.clearSelection();
    }
    public void selectSpecific(int index)
    {
        //if(index < 1 || index > options.length)
            //JOptionPane.showMessageDialog(null, "mistake" + questionObject.getQuestionName());
        options[index -1].setSelected(true);
        options[index -1].setEnabled(true);
        //String text = options[index - 1].getText();
        options[index -1].setForeground(Color.GREEN);
        options[index -1].setToolTipText("Correct answer");
        //options[index - 1].setText(text);
    }
    public void enableAll()
    {
        //optionGroup.clearSelection();
        for(JRadioButton but:options)
        {
            but.setEnabled(true);
            but.setForeground(Color.black);
            but.setToolTipText("");
            but.repaint();
        }
    }

   
}
